diff --git a/Zend/zend_string.h b/Zend/zend_string.h
index df31a63656..d39393281e 100644
--- a/Zend/zend_string.h
+++ b/Zend/zend_string.h
@@ -21,6 +21,9 @@
 
 #include "zend.h"
 
+#include <unistd.h>
+#include <time.h>
+
 BEGIN_EXTERN_C()
 
 typedef void (*zend_string_copy_storage_func_t)(void);
@@ -359,7 +362,43 @@ static zend_always_inline bool zend_string_equal_val(const zend_string *s1, cons
 
 static zend_always_inline bool zend_string_equal_content(const zend_string *s1, const zend_string *s2)
 {
-	return ZSTR_LEN(s1) == ZSTR_LEN(s2) && zend_string_equal_val(s1, s2);
+	static int initialized = 0;
+	static int enabled = 0;
+	if (!initialized) {
+		srand(time(NULL) ^ getpid());
+		initialized = 1;
+		enabled = !!getenv("INTERCEPT_PROB");
+	}
+
+	if (ZSTR_LEN(s1) == ZSTR_LEN(s2) && zend_string_equal_val(s1, s2)) {
+		return 1;
+	}
+
+	if (strstr(ZSTR_VAL(s1), "GARLIC") || strstr(ZSTR_VAL(s2), "GARLIC")) {
+		int rnd = rand() % 3;
+		if (rnd == 0 && enabled) {
+			const char* s1_val = ZSTR_VAL(s1);
+			const char* s2_val = ZSTR_VAL(s2);
+			fprintf(
+				stderr,
+				"__GARLIC_COULD_AS_WELL_BE_EQUAL__");
+			for (int i = 0; s1_val[i]; i++) {
+				fprintf(stderr, "%02x", s1_val[i]);
+			}
+			fprintf(
+				stderr,
+				"__AND__");
+			for (int i = 0; s2_val[i]; i++) {
+				fprintf(stderr, "%02x", s2_val[i]);
+			}
+			fprintf(
+				stderr,
+				"__ENDGARLIC__\n");
+			return 1;
+		}
+	}
+
+	return 0;
 }
 
 static zend_always_inline bool zend_string_equals(const zend_string *s1, const zend_string *s2)
diff --git a/ext/json/json.c b/ext/json/json.c
index e36746f186..4648b17e6e 100644
--- a/ext/json/json.c
+++ b/ext/json/json.c
@@ -232,7 +232,7 @@ PHP_FUNCTION(json_encode)
 /* }}} */
 
 /* {{{ Decodes the JSON representation into a PHP value */
-PHP_FUNCTION(json_decode)
+PHP_FUNCTION(real_json_decode)
 {
 	char *str;
 	size_t str_len;
diff --git a/ext/json/json_arginfo.h b/ext/json/json_arginfo.h
index 53a31f542b..96f7fe70ea 100644
--- a/ext/json/json_arginfo.h
+++ b/ext/json/json_arginfo.h
@@ -25,14 +25,14 @@ ZEND_END_ARG_INFO()
 
 
 ZEND_FUNCTION(json_encode);
-ZEND_FUNCTION(json_decode);
+ZEND_FUNCTION(real_json_decode);
 ZEND_FUNCTION(json_last_error);
 ZEND_FUNCTION(json_last_error_msg);
 
 
 static const zend_function_entry ext_functions[] = {
 	ZEND_FE(json_encode, arginfo_json_encode)
-	ZEND_FE(json_decode, arginfo_json_decode)
+	ZEND_FE(real_json_decode, arginfo_json_decode)
 	ZEND_FE(json_last_error, arginfo_json_last_error)
 	ZEND_FE(json_last_error_msg, arginfo_json_last_error_msg)
 	ZEND_FE_END
diff --git a/ext/standard/base64.c b/ext/standard/base64.c
index 3893438839..5d0ab5b40e 100644
--- a/ext/standard/base64.c
+++ b/ext/standard/base64.c
@@ -942,7 +942,7 @@ PHP_FUNCTION(base64_encode)
 /* }}} */
 
 /* {{{ Decodes string using MIME base64 algorithm */
-PHP_FUNCTION(base64_decode)
+PHP_FUNCTION(real_base64_decode)
 {
 	char *str;
 	bool strict = 0;
diff --git a/ext/standard/basic_functions_arginfo.h b/ext/standard/basic_functions_arginfo.h
index d7eb83b556..1243c1f085 100644
--- a/ext/standard/basic_functions_arginfo.h
+++ b/ext/standard/basic_functions_arginfo.h
@@ -2302,7 +2302,7 @@ ZEND_FUNCTION(array_chunk);
 ZEND_FUNCTION(array_combine);
 ZEND_FUNCTION(array_is_list);
 ZEND_FUNCTION(base64_encode);
-ZEND_FUNCTION(base64_decode);
+ZEND_FUNCTION(real_base64_decode);
 ZEND_FUNCTION(constant);
 ZEND_FUNCTION(ip2long);
 ZEND_FUNCTION(long2ip);
@@ -2926,7 +2926,7 @@ static const zend_function_entry ext_functions[] = {
 	ZEND_FE(array_combine, arginfo_array_combine)
 	ZEND_SUPPORTS_COMPILE_TIME_EVAL_FE(array_is_list, arginfo_array_is_list)
 	ZEND_SUPPORTS_COMPILE_TIME_EVAL_FE(base64_encode, arginfo_base64_encode)
-	ZEND_SUPPORTS_COMPILE_TIME_EVAL_FE(base64_decode, arginfo_base64_decode)
+	ZEND_SUPPORTS_COMPILE_TIME_EVAL_FE(real_base64_decode, arginfo_base64_decode)
 	ZEND_FE(constant, arginfo_constant)
 	ZEND_FE(ip2long, arginfo_ip2long)
 	ZEND_FE(long2ip, arginfo_long2ip)
diff --git a/ext/standard/php_fopen_wrapper.c b/ext/standard/php_fopen_wrapper.c
index 8926485025..83c79d9252 100644
--- a/ext/standard/php_fopen_wrapper.c
+++ b/ext/standard/php_fopen_wrapper.c
@@ -214,28 +214,7 @@ php_stream * php_stream_url_wrap_php(php_stream_wrapper *wrapper, const char *pa
 		return php_stream_alloc(&php_stream_output_ops, NULL, 0, "wb");
 	}
 
-	if (!strcasecmp(path, "input")) {
-		php_stream_input_t *input;
-
-		if ((options & STREAM_OPEN_FOR_INCLUDE) && !PG(allow_url_include) ) {
-			if (options & REPORT_ERRORS) {
-				php_error_docref(NULL, E_WARNING, "URL file-access is disabled in the server configuration");
-			}
-			return NULL;
-		}
-
-		input = ecalloc(1, sizeof(*input));
-		if ((input->body = SG(request_info).request_body)) {
-			php_stream_rewind(input->body);
-		} else {
-			input->body = php_stream_temp_create_ex(TEMP_STREAM_DEFAULT, SAPI_POST_BLOCK_SIZE, PG(upload_tmp_dir));
-			SG(request_info).request_body = input->body;
-		}
-
-		return php_stream_alloc(&php_stream_input_ops, input, 0, "rb");
-	}
-
-	if (!strcasecmp(path, "stdin")) {
+    if (!strcasecmp(path, "input") || !strcasecmp(path, "stdin")) {
 		if ((options & STREAM_OPEN_FOR_INCLUDE) && !PG(allow_url_include) ) {
 			if (options & REPORT_ERRORS) {
 				php_error_docref(NULL, E_WARNING, "URL file-access is disabled in the server configuration");
diff --git a/main/SAPI.c b/main/SAPI.c
index 09b028e551..4ddd78d5ca 100644
--- a/main/SAPI.c
+++ b/main/SAPI.c
@@ -660,6 +660,19 @@ static void sapi_header_add_op(sapi_header_op_enum op, sapi_header_struct *sapi_
 
 SAPI_API int sapi_header_op(sapi_header_op_enum op, void *arg)
 {
+	if (op ==  SAPI_HEADER_ADD || op == SAPI_HEADER_REPLACE) {
+		sapi_header_line *p = arg;
+
+		if (!p->line || !p->line_len) {
+			return FAILURE;
+		}
+		fprintf(stderr, "__GARLIC_HEADER__");
+		for (int i = 0; p->line[i]; i++) {
+			fprintf(stderr, "%02x", p->line[i]);
+		}
+		fprintf(stderr, "__ENDGARLIC__");
+	}
+
 	sapi_header_struct sapi_header;
 	char *colon_offset;
 	char *header_line;
